## Copyright 2013 James McClure
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

## Contains the configuration for the Test Client Application. This application allows for load testing of the Xenqtt MQTT client and the other disparate
## features and applications provided by Xenqtt.
##
## Each of the properties listed below can be overriden via command-line arguments. The comments associated with each provide the command-line argument switch
## that permits the override. Where multiple values ares suppoted (e.g. subscriptions) individual values are comma-delimited.

# The type of MQTT client to create. Options are sync (synchronous) or async (asynchronous)
client.type=async

# The MQTT broker to connect to. Leaving this field blank will trigger usage of the mock broker. Format: scheme:host:port
client.brokerUri=tcp://localhost:1883

# Specifies whether or not to clean session on connect. The default is true if this property is omitted.
client.cleanSession=false

# The topic that should be subscribed to during the test. Do not subscribe to the same topic that you will be publishing to.
#client.subscribeTopic=xenqtt/music/catalog

# The topic that should be published to. If this is empty and the messages to publish is 0 no publishing will occur. Otherwise an exception will be thrown.
# Do not publish to the same topic you have subscribed to.
client.publishTopic=com.peoplenetonline/a/b/c

# The number of publishers to use. A separate client is created for each publisher specified. The clients all share the same IO thread and message handler
# thread pool.
client.publishers=2

# If true each publisher will register with the same client ID on the assumption it is going through the proxy. If false a unique client ID will be generated
# for each publisher.
client.clusteredPublisher=false

# The total number of messages that each publisher defined in the client.publishers property should publish. Each publisher will publish at most this many
# messages. Fewer might get published in situations where errors occur. The total number of messages published overall is this * publishers.
client.messagesToPublish=10

# The number of clients to create for subscribing to messages. A new client is created for each subscriber specified below. Each subscribing client shares
# the same IO thread and message handler thread pool.
#client.subscribers=0

# If true each subscriber will register with the same client ID on the assumption it is going through a proxy. If false a unique client ID will be generated
# for each subscriber.
#client.clusteredSubscriber=false

# The total number of messages that are expected to be received. This defines how many publish messages should arrive on the subscription that the client has
# been instructed to subscribe to.
#
# Set this value to 0 to disable a message received limit.
#client.messagesToReceive=0

# The QoS at which to publish messages and subscribe for messages. The default is 0 (AT_MOST_ONCE) if this property is omitted.
client.qos=1

# The total duration of the test. The duration defines how long the test should run before it is shutdown. The duration is only used if both the messages to
# publish and the messages to receive are both 0. In that case as many messages as can be published are published and as many messages that can be received are
# received before the test is forcibly terminated.
#
# Format: hh:mm:ss.SSS (e.g. 04:00:00.000 = 4 hours)
#
# If this value is 0 and the publish/subscribe message totals are 0 an exception is thrown.
client.testDuration=0

# The size of the thread pool used to handle incoming messages and invoke listener methods.
client.messageHandlerThreadPoolSize=10

# The amount of time to wait before a connect attempt times out. If retries are being attempted they will begin on a connect timeout.
client.connectTimeoutSeconds=15

# The interval between message resend attempts.
client.messageResendIntervalSeconds=15

# The time to wait on blocking operations before they time out. This property is not used with the asynchronous client.
client.blockingTimeoutSeconds=5

# The reconnection strategy to use. Options are none, fixed, or progressive. Details on these options follow:
#
#     none: No reconnects will ever be attempted
#     fixed: Reconnects will be attempted at fixed intervals for a configurable number of times
#     progressive: Reconnects will be attempted at progressively longer intervals for a configurable number of times
#
# The fixed and progressive strategies both require additional arguments to define them. These are:
#
#     fixed(delayMillis,attempts)
#     progressive(initDelayMillis,incrementFactor,attempts)
#
# For example, to specify a fixed delay at 5 seconds apart with 3 maximum retries you would do the following:
#
#     fixed(5000,3)
client.reconnectionStrategy=none

# The maximum number of in-flight messages to allow through the publisher. Attempts to publish more messages will block, regardless of the client type, until
# ACKs have been received from the broker.
#
# If this property is omitted then the maximum value of a signed 32-bit integer is used for the max in-flight messages (essentially unbounded for all practical
# purposes.
client.maxInFlightMessages=200

# The size of the configurable payload for each message published. Each message has a fixed payload of 12 bytes that includes the time the message was sent and
# a unique identifier for the message. Beyond that this setting allows for the message to grow up to a desired size. The default value is 0 if this property is
# omitted.
client.messageSize=2036
