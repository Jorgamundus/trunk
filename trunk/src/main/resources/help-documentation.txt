---------------------------------------------------------------------------------------------------
Copyright 2013 James McClure

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
---------------------------------------------------------------------------------------------------

USAGE: java -jar xenqtt.jar [-v[v]] mockbroker|help [args.or.flags]
	mockbroker - Run a mock MQTT broker. Useful in testing and debugging
	help - Display information on xenqtt and how it can be used
	
	-v: Increase logging verbosity. v = info, vv = debug

Xenqtt - Facilitates advanced communication strategies for MQTT-based communication systems. Xenqtt
provides the following:

	An MQTT client that operates in either synchronous or asynchronous mode
	A mock broker that permits client interaction and broker-specific customizations

The following sections provide more information on each of these features.

Xenqtt Client:

The xenqtt client comes bundled with the JAR file. Include the JAR file in your applications to
make use of the client. For more information on how to use the client please see the Xenqtt
project page for Javadoc, an overview, details, and example code.

Xenqtt Mock Broker:

The mock broker is an MQTT broker that facilitates communication between disparate clients. The
mock broker supports the MQTT protocol out-of-the-box (save for QoS 2 which is not presently
supported). In addition to full protocol support the mock broker also provides hooks for users
to customize the behavior of various operations. These include publishing, subscribing, and so
forth.

Logging

Xenqtt uses Java logging (commonly called JUL) by default. It does respect a client's choice of the
log4j framework though. If log4j is detected on the classpath all logging is deferred to a logger
called "xenqtt" that is used in the application. Otherwise all logging is done to a file called
xenqtt.log.# in the directory hosting the JAR. Most commonly an application using it as a client
will have a logging solution in-place so that should take precedence. The JUL logging is mainly
used for the standalone proxy or gateway solutions.

By default logging is done at the WARN (warning in JUL) level. To increase the verbosity of logging
in the proxy and gateway solutions the command-line switch -v can be used. A single -v will enable
INFO logging. Two -v switches (or a single -vv switch) will enabled DEBUG logging.